import { TfIdf } from 'natural';

const splitRegex = /[^\w\-]+/g;
class Index {
    tfidf = new TfIdf();
    index = {};
    docs = {};
    addDocument(key, doc) {
        this.docs[key] = doc;
        Object.entries(doc).forEach(([field, val]) => {
            this.tfidf.addDocument(val, `${key}:${field}`);
        });
    }
    tfidfs(word) {
        const results = [];
        this.tfidf.tfidfs(word, (_i, measure, keyAndField) => {
            if (keyAndField) {
                // shouldn't happen while we are supplying a key on creation
                const [key, field] = keyAndField?.split(':') ?? [];
                results.push({ measure, key, field });
            }
        });
        return results;
    }
    query(query) {
        const words = query.split(splitRegex);
        const wordMeasures = words.map((word) => ({ word, measures: this.tfidfs(word) }));
        const results = {};
        wordMeasures.forEach(({ measures }) => measures.forEach(({ key, measure }) => {
            if (!(key in results)) {
                results[key] = 0;
            }
            results[key] += measure;
        }));
        return Object.entries(results)
            .filter(([_key, val]) => val > 0)
            .map(([key, score]) => ({
            key,
            score,
            doc: this.docs[key],
        }))
            .sort(({ score: a }, { score: b }) => b - a);
    }
}

export { Index };
